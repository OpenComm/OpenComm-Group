add to AndroidManifest.xml:
<uses-permission android:name="android.permission.RECORD_AUDIO"></uses-permission>
    <uses-permission android:name="android.permission.WAKE_LOCK"></uses-permission>

add to MainApplication:
	onCreate:
	PowerManager pm = (PowerManager)getSystemService(Context.POWER_SERVICE);
        mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "MyTag");
        mWakeLock.acquire();
		
	@Override
    public void onDestroy() {
    	super.onDestroy();
    	if (mWakeLock != null) {
    	    mWakeLock.release();
    	    mWakeLock = null;
    	} 
    }
	
	
add to JingleController:
private static HashMap<String, JingleController> UsernameToJingleController = new HashMap<String, JingleController> ();

	private SoundSpatializer soundSpatializer;
	
		public JingleController(User user) {
		state = new SessionCallStateMachine();
		this.user = user;
		this.connection = LoginController.xmppService.getXMPPConnection();
		this.soundSpatializer = new SoundSpatializer();
		jiqActionMessageSender = new JingleIQActionMessages();
		iqMessageSender = new IQMessages();
		this.buddyJID = user.getUsername().split("@")[0] + Network.DEFAULT_HOSTNAME +  "/Smack";
		jiqActionMessageSender.setConnection(connection);
		iqMessageSender.setConnection(connection);
		JingleController.UsernameToJingleController.put(this.user.getUsername(), this);
	}
	
	public static HashMap<String, JingleController> getUsernameToJingleController() {
		return UsernameToJingleController;
	}
	
	public SoundSpatializer getSoundSpatializer() {
		return soundSpatializer;
	}


	public void setSoundSpatializer(SoundSpatializer soundSpatializer) {
		this.soundSpatializer = soundSpatializer;
	}
	
	public User getUser() {
		return user;
	}


	public void setUser(User user) {
		this.user = user;
	}
	
	public String getBuddyJID() {
		return buddyJID;
	}

change in JingleIQActionMessages.sendSessionTerminate():
2nd to last line:
buddy.pusher.removeQueue(buddy.getBuddyJID());
	
	
add to NetworkService.(init): JingleIQBuddyPacketRouter.setup(xmppConn);


add to NetworkService.disconnect():
HashMap<String, JingleController> allJCtrls = JingleController
				.getUsernameToJingleController();
		Iterator<String> jctrlItr = allJCtrls.keySet().iterator();
		while (jctrlItr.hasNext()) {
			JingleController jCtrl = allJCtrls.get(jctrlItr.next());
			ReasonElementType reason = new ReasonElementType(
					ReasonElementType.TYPE_SUCCESS, "Done, Logging Off!");
			reason.setAttributeSID(jCtrl.getSID());
			jCtrl.getJiqActionMessageSender().sendSessionTerminate(
					MainApplication.userPrimary.getJingle().getBuddyJID(),
					jCtrl.getBuddyJID(), jCtrl.getSID(), reason, jCtrl);
			jCtrl.getSessionState().changeSessionState(
					JingleIQPacket.AttributeActionValues.SESSION_TERMINATE);
		}

add to User.init:
private JingleController jCtrl;
this.jCtrl = new JingleController(this);

    /** @return - the jingle controller associated with this user */
    public JingleController getJingle() {
    	return this.jCtrl;
    }

remove from JingleIQBuddyPacketRouter:

	private static XMPPClient xmppClient = null;
	
	/**
	 * Provides easy access to the <code>XMPPClient</code> object in order to fetch the <code>ongoingChatBuddyList</code>
	 * @param client the instance of the XMPPClient object
	 */
	public static void setXMPPClient(XMPPClient client){
		xmppClient = client;
	}
	
replace in JingleIQBuddyPacketRouter:
						User user = null;
						JingleController jCtrl = null;
						Log.i(JingleIQBuddyPacketRouter.TAG, "Looking for User: " + jiq.getFrom() + " in OngoingChatBuddyList");
						String userJid = jiq.getFrom().split("/")[0];
						if(!JingleController.getUsernameToJingleController().containsKey(userJid)){
							Log.i(JingleIQBuddyPacketRouter.TAG, "Does not contain key " + userJid);
							if (!User.getAllUsers().containsKey(userJid)) {
								user = new User(userJid, userJid.split("@")[0], 0);
							}
							else {
								user = User.getAllUsers().get(userJid);
							}
							jCtrl = new JingleController(user);
							jCtrl.setSID(jiq.getAttributeSID());
							// TODO update the buddy list <- automatically completed by the network?
							//xmppClient.getOngoingChatBuddyList().put(jiq.getFrom(), buddy);
							Log.i(JingleIQBuddyPacketRouter.TAG, "Created user: Jsername = " + jCtrl.getBuddyJID() + 
									" Session SID: " + jCtrl.getSID());
							jCtrl.processPacket(jiq);
						} else {
							jCtrl = JingleController.getUsernameToJingleController().get(userJid);
							jCtrl.setSID(jiq.getAttributeSID());
							Log.i(JingleIQBuddyPacketRouter.TAG, "Found user: Username = " + jCtrl.getBuddyJID());
							jCtrl.processPacket(jiq);
						}
						
					} else if (p instanceof IQ) {
						Log.i(JingleIQBuddyPacketRouter.TAG, "PacketType: IQ packet");
						IQ iq = (IQ) p;
						Log.i(JingleIQBuddyPacketRouter.TAG, "From: "  + iq.getFrom()+ "To: " + iq.getTo());
						String fromJID = iq.getFrom().split("/")[0];
						if (Space.getMainSpace().getAllParticipants().containsKey(fromJID)) {
							Space.getMainSpace().getAllParticipants().get(fromJID).getJingle().processPacket(iq);
						}

					}

add to InvitationController.handleAcceptButtonHover:
 // Initiate Jingle session with all members of the chat room.
            Log.d(TAG, "Initiating Jingle session");
            Iterator<String> partItr = Space.getMainSpace().getAllParticipants().keySet().iterator();
			if(Space.getMainSpace().getAllParticipants() == null || !partItr.hasNext()){
				Log.i("InvitationController", "Space has no occupants!!");
			}
			else {
				while(partItr.hasNext()){
					String participant = partItr.next();
					User partUser = Space.getMainSpace().getAllParticipants().get(participant);
					if (!MainApplication.userPrimary.equals(partUser) && (Space.getMainSpace() != null && !Space.getMainSpace().getOwner().equals(MainApplication.userPrimary))) {
						// Send session-initiate to the buddy.
						partUser.getJingle().getJiqActionMessageSender().sendSessionInitiate(MainApplication.userPrimary.getJingle().getBuddyJID(), partUser.getJingle().getBuddyJID(), partUser.getJingle());
						partUser.getJingle().getSessionState().changeSessionState(JingleIQPacket.AttributeActionValues.SESSION_INITIATE);
						Log.d("InvitationController", "JingleController sent");
					}
				}												
			}


add to UserViewController.handleClickUp:
// move location of sound source
            this.userView.getPerson().getJingle().getSoundSpatializer().moveTo(newX, newY);				

add to Userview:
user.getJCtrl().receiver.talking